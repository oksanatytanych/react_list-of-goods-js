{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FILD_ALPHABET","SORT_FILD_LENGTH","REVERSE_FILD","App","useState","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","prepareGoods","reverse","sort","a","b","localeCompare","length","getPrepareGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAqB,sBACrBC,EAAmB,iBACnBC,EAAe,UAkCd,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EAnCR,SAAyBC,EAAOL,EAAWE,GACzC,IAAMI,EAAY,YAAOD,GA4BzB,OA1BKL,GAAaE,EAChBI,EAAaC,UACJP,GACTM,EAAaE,MAAK,SAACC,EAAGC,GACpB,GAAKR,EAUH,OAAQF,GACN,KAAKL,EACH,OAAOe,EAAEC,cAAcF,GACzB,KAAKb,EACH,OAAOc,EAAEE,OAASH,EAAEG,OACtB,QACE,OAAO,OAfX,OAAQZ,GACN,KAAKL,EACH,OAAOc,EAAEE,cAAcD,GACzB,KAAKd,EACH,OAAOa,EAAEG,OAASF,EAAEE,OACtB,QACE,OAAO,MAeVN,EAMcO,CACnBnB,EACAM,EACAE,GASF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAcL,IAE9BsB,QAAS,kBAAMhB,EAAaN,IAP9B,iCAYA,wBACEoB,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYhB,IAAcJ,IAE9BqB,QAAS,kBAAMhB,EAAaL,IAP9B,4BAYA,wBACEmB,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYd,IAAiBL,IAEjCoB,QAAS,WArCfd,EAFqBD,EAAe,GAAKL,IAgCrC,sBAYEG,GAAaE,IACb,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPhB,EAAa,IACbE,EAAgB,KALpB,sBAaJ,6BACGC,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAAwCA,GAAxC,cAA+BA,aC1HzCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.01df9b0b.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FILD_ALPHABET = 'Sort alphabetically';\nconst SORT_FILD_LENGTH = 'Sort by length';\nconst REVERSE_FILD = 'Reverse';\n\nfunction getPrepareGoods(goods, sortField, reverseField) {\n  const prepareGoods = [...goods];\n\n  if (!sortField && reverseField) {\n    prepareGoods.reverse();\n  } else if (sortField) {\n    prepareGoods.sort((a, b) => {\n      if (!reverseField) {\n        switch (sortField) {\n          case SORT_FILD_ALPHABET:\n            return a.localeCompare(b);\n          case SORT_FILD_LENGTH:\n            return a.length - b.length;\n          default:\n            return 0;\n        }\n      } else {\n        switch (sortField) {\n          case SORT_FILD_ALPHABET:\n            return b.localeCompare(a);\n          case SORT_FILD_LENGTH:\n            return b.length - a.length;\n          default:\n            return 0;\n        }\n      }\n    });\n  }\n\n  return prepareGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState('');\n  const visibleGoods = getPrepareGoods(\n    goodsFromServer,\n    sortField,\n    reverseField,\n  );\n\n  function reverseWithConditions() {\n    const reverseValue = reverseField ? '' : REVERSE_FILD;\n\n    setReverseField(reverseValue);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SORT_FILD_ALPHABET },\n          )}\n          onClick={() => setSortField(SORT_FILD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SORT_FILD_LENGTH },\n          )}\n          onClick={() => setSortField(SORT_FILD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': reverseField !== REVERSE_FILD },\n          )}\n          onClick={() => reverseWithConditions()}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setReverseField('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={`#id-${good}`}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}